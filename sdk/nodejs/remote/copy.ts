// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Copy an Asset or Archive to a remote host.
 */
export class Copy extends pulumi.CustomResource {
    /**
     * Get an existing Copy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Copy {
        return new Copy(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'command:remote:Copy';

    /**
     * Returns true if the given object is an instance of Copy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Copy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Copy.__pulumiType;
    }

    /**
     * The parameters with which to connect to the remote host.
     */
    public readonly connection!: pulumi.Output<outputs.remote.Connection>;
    /**
     * An archive to upload. It must be a path based archive. Only one of LocalAsset or LocalArchive can be set.
     */
    public readonly localArchive!: pulumi.Output<pulumi.asset.Archive | undefined>;
    /**
     * An asset to upload. It must be a path based asset. Only one of LocalAsset or LocalArchive can be set.
     */
    public readonly localAsset!: pulumi.Output<pulumi.asset.Asset | pulumi.asset.Archive | undefined>;
    /**
     * The destination path in the remote host.
     */
    public readonly remotePath!: pulumi.Output<string>;
    /**
     * Trigger replacements on changes to this input.
     */
    public readonly triggers!: pulumi.Output<any[] | undefined>;

    /**
     * Create a Copy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CopyArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.connection === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connection'");
            }
            if ((!args || args.remotePath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'remotePath'");
            }
            resourceInputs["connection"] = args?.connection ? pulumi.secret((args.connection ? pulumi.output(args.connection).apply(inputs.remote.connectionArgsProvideDefaults) : undefined)) : undefined;
            resourceInputs["localArchive"] = args ? args.localArchive : undefined;
            resourceInputs["localAsset"] = args ? args.localAsset : undefined;
            resourceInputs["remotePath"] = args ? args.remotePath : undefined;
            resourceInputs["triggers"] = args ? args.triggers : undefined;
        } else {
            resourceInputs["connection"] = undefined /*out*/;
            resourceInputs["localArchive"] = undefined /*out*/;
            resourceInputs["localAsset"] = undefined /*out*/;
            resourceInputs["remotePath"] = undefined /*out*/;
            resourceInputs["triggers"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["connection"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Copy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Copy resource.
 */
export interface CopyArgs {
    /**
     * The parameters with which to connect to the remote host.
     */
    connection: pulumi.Input<inputs.remote.ConnectionArgs>;
    /**
     * An archive to upload. It must be a path based archive. Only one of LocalAsset or LocalArchive can be set.
     */
    localArchive?: pulumi.Input<pulumi.asset.Archive>;
    /**
     * An asset to upload. It must be a path based asset. Only one of LocalAsset or LocalArchive can be set.
     */
    localAsset?: pulumi.Input<pulumi.asset.Asset | pulumi.asset.Archive>;
    /**
     * The destination path in the remote host.
     */
    remotePath: pulumi.Input<string>;
    /**
     * Trigger replacements on changes to this input.
     */
    triggers?: pulumi.Input<any[]>;
}
